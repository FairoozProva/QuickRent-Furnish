// shared/schema.ts
import mongoose from 'mongoose';

// User Schema
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, required: true },
  email: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

// Category Schema
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  imageUrl: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

// Product Schema
const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  sku: { type: String, required: true, unique: true },
  description: { type: String, required: true },
  price: { type: Number, required: true },
  categoryId: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: true },
  imageUrl: { type: String, required: true },
  dimensions: { type: String },
  color: { type: String },
  material: { type: String },
  seats: { type: Number },
  isTrending: { type: Boolean, default: false },
  isNewArrival: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now }
});

// Rental Schema
const rentalSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  totalAmount: { type: Number, required: true },
  status: { type: String, required: true, enum: ['pending', 'active', 'completed', 'cancelled'] },
  createdAt: { type: Date, default: Date.now }
});

// Wishlist Schema
const wishlistSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  createdAt: { type: Date, default: Date.now }
});

// Cart Schema
const cartSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
  duration: { type: Number, required: true },
  createdAt: { type: Date, default: Date.now }
});

// Create models
export const User = mongoose.model('User', userSchema);
export const Category = mongoose.model('Category', categorySchema);
export const Product = mongoose.model('Product', productSchema);
export const Rental = mongoose.model('Rental', rentalSchema);
export const Wishlist = mongoose.model('Wishlist', wishlistSchema);
export const Cart = mongoose.model('Cart', cartSchema);

// Define interfaces for TypeScript
export type InsertUser = Omit<mongoose.Document & typeof User, '_id' | 'createdAt'>;
export type InsertCategory = Omit<mongoose.Document & typeof Category, '_id' | 'createdAt'>;
export type InsertProduct = Omit<mongoose.Document & typeof Product, '_id' | 'createdAt'>;
export type InsertRental = Omit<mongoose.Document & typeof Rental, '_id' | 'createdAt'>;
export type InsertWishlist = Omit<mongoose.Document & typeof Wishlist, '_id' | 'createdAt'>;
export type InsertCart = Omit<mongoose.Document & typeof Cart, '_id' | 'createdAt'>;

// Export all models with shorthand names for convenience
export const users = User;
export const categories = Category;
export const products = Product;
export const rentals = Rental;
export const wishlist = Wishlist;
export const cart = Cart;